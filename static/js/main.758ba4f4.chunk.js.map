{"version":3,"sources":["services/pixabay.js","components/Searchbar/Searchbar.js","components/Modal/Modal.js","components/ImageGalleryItem/ImageGalleryItem.js","components/ImageGallery/ImageGallery.js","components/Button/Button.js","components/Loader/Loader.js","App.js","index.js"],"names":["pixabayFetchPhoto","query","currentPage","axios","get","then","response","data","hits","propTypes","PropTypes","string","isRequired","number","Searchbar","onSubmit","useState","setQuery","className","e","preventDefault","type","value","autoComplete","autoFocus","placeholder","onChange","currentTarget","toLowerCase","modalRoot","document","querySelector","Modal","src","alt","onClose","useEffect","window","addEventListener","handleKeyDown","removeEventListener","code","createPortal","onClick","event","target","ImageGalleryItem","largeImageUrl","modalOpen","setModalOpen","toggleModal","ImageGallery","images","map","image","webformatURL","tags","largeImageURL","id","Button","LoaderSpinner","color","height","width","timeout","Component","App","setImages","setCurrentPage","search","setSearch","isLoading","setIsLoading","error","setError","gallery","prevState","catch","finally","newSearch","length","options","top","behavior","pageYOffset","documentElement","clientHeight","setTimeout","scrollTo","ReactDOM","render","StrictMode","getElementById"],"mappings":"0SAMMA,EAAoB,SAACC,EAAOC,GAC9B,OAAOC,IACFC,IADE,UAJM,2BAIN,cAEkBH,EAFlB,iBAEgCC,EAFhC,gBAHK,qCAGL,yDAIFG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,KAAKC,SAIxCR,EAAkBS,UAAY,CAC1BR,MAAOS,IAAUC,OAAOC,WACxBV,YAAaQ,IAAUG,OAAOD,YAInBZ,Q,OCjBA,SAASc,EAAT,GAA+B,IAAXC,EAAU,EAAVA,SAE/B,EAA0BC,mBAAS,IAAnC,mBAAOf,EAAP,KAAcgB,EAAd,KAeI,OACI,wBAAQC,UAAU,YAAlB,SACI,uBAAMA,UAAU,aAAaH,SATpB,SAAAI,GACjBA,EAAEC,iBAEFL,EAASd,GACTgB,EAAS,KAKD,UACI,wBAAQI,KAAK,SAASH,UAAU,oBAAhC,SACI,sBAAMA,UAAU,0BAAhB,sBAGJ,uBACII,MAAOrB,EACPiB,UAAU,mBACVG,KAAK,OACLE,aAAa,MACbC,WAAS,EACTC,YAAY,2BACZC,SA3BC,SAAAP,GACjBF,EACIE,EAAEQ,cAAcL,MAAMM,uBCNlC,IAAMC,EAAYC,SAASC,cAAc,eAE1B,SAASC,EAAT,GAAoC,IAApBC,EAAmB,EAAnBA,IAAKC,EAAc,EAAdA,IAAKC,EAAS,EAATA,QAEvCC,qBAAU,WAER,OADAC,OAAOC,iBAAiB,UAAWC,GAC5B,WACLF,OAAOG,oBAAoB,UAAWD,OAI1C,IAAMA,EAAgB,SAAApB,GACL,WAAXA,EAAEsB,MACJN,KAUF,OAAOO,uBACL,qBAAKxB,UAAU,UAAUyB,QAPD,SAAAC,GACtBA,EAAMjB,gBAAkBiB,EAAMC,QAChCV,KAKA,SACE,qBAAKjB,UAAU,QAAf,SACE,qBAAKe,IAAKA,EAAKC,IAAKA,QAGxBL,GC7BS,SAASiB,EAAT,GAAsD,IAA1Bb,EAAyB,EAAzBA,IAAKC,EAAoB,EAApBA,IAAKa,EAAe,EAAfA,cAEjD,EAAkC/B,oBAAS,GAA3C,mBAAOgC,EAAP,KAAkBC,EAAlB,KAEMC,EAAc,WAEhBD,GAAcD,IAGd,OACI,qBAAI9B,UAAU,mBAAd,UACI,qBACIyB,QAASO,EACTjB,IAAKA,EACLC,IAAKA,EACLhB,UAAU,2BAEb8B,GAAc,cAAChB,EAAD,CAAOG,QAASe,EAAajB,IAAKc,EAAeb,IAAKA,OClBtE,SAASiB,EAAT,GAAmC,IAAXC,EAAU,EAAVA,OACnC,OACI,oBAAIlC,UAAU,eAAd,SACKkC,EAAOC,KAAI,SAACC,GAAD,OACR,cAACR,EAAD,CACIb,IAAKqB,EAAMC,aACXrB,IAAKoB,EAAME,KACXT,cAAeO,EAAMG,eAChBH,EAAMI,SCRhB,SAASC,EAAT,GAA8B,IAAZhB,EAAW,EAAXA,QAC7B,OACI,wBAAQtB,KAAK,SAASH,UAAU,SAASyB,QAASA,EAAlD,uB,6DCFaiB,E,4JACnB,WACE,OACE,cAAC,IAAD,CACEvC,KAAK,WACLwC,MAAM,UACNC,OAAQ,GACRC,MAAO,GACPC,QAAS,IACT9C,UAAU,e,GATyB+C,aCM5B,SAASC,IAEtB,MAA4BlD,mBAAS,IAArC,mBAAOoC,EAAP,KAAee,EAAf,KACA,EAAsCnD,mBAAS,GAA/C,mBAAOd,EAAP,KAAoBkE,EAApB,KACA,EAA4BpD,mBAAS,IAArC,mBAAOqD,EAAP,KAAeC,EAAf,KACA,EAAkCtD,oBAAS,GAA3C,mBAAOuD,EAAP,KAAkBC,EAAlB,KACA,EAA0BxD,mBAAS,MAAnC,mBAAOyD,EAAP,KAAcC,EAAd,KAEAtC,qBAAU,WACLiC,IAIJG,GAAa,GAChBxE,EAAkBqE,EAAQnE,GACvBG,MAAK,SAAAsE,GACJR,GAAU,SAAAS,GAAS,4BAAQA,GAAR,YAAsBD,UAE1CE,OAAM,SAAAJ,GACLC,EAASD,MAEVK,SAAQ,WACPN,GAAa,SAEZ,CAACtE,EAAamE,IAyBhB,OACG,sBAAKnD,UAAU,MAAf,UAEE,cAACJ,EAAD,CAAWC,SAbI,SAAAgE,GACfA,IAAcV,IAGlBC,EAAUS,GACVX,EAAe,GACfD,EAAU,QAQLM,GAAU,6DACVF,GACC,cAAC,EAAD,IAEF,cAACpB,EAAD,CAAcC,OAAQA,IACrBiB,GAAUjB,EAAO4B,OAAS,IACzB,cAACrB,EAAD,CAAQhB,QAjCc,WAC5ByB,GAAe,SAAAQ,GAAS,OAAIA,EAAY,KACxC,IAAMK,EAAU,CACVC,IAAK,KACLC,SAAU,UAGZF,EAAQC,IAAM7C,OAAO+C,YAActD,SAASuD,gBAAgBC,aAC5DC,YAAW,WACTlD,OAAOmD,SAASP,KACf,WCvCXQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF7D,SAAS8D,eAAe,W","file":"static/js/main.758ba4f4.chunk.js","sourcesContent":["import axios from 'axios';\nimport PropTypes from 'prop-types';\n\nconst BASE_URL = 'https://pixabay.com/api/';\nconst API_KEY = '23122721-ac4409033b31871735d6c9bbc';\n\nconst pixabayFetchPhoto = (query, currentPage) => {\n    return axios\n        .get(\n            `${BASE_URL}?q=${query}&page=${currentPage}&key=${API_KEY}&image_type=photo&orientation=horizontal&per_page=12`\n        )\n        .then(response => response.data.hits);\n};\n\n\npixabayFetchPhoto.propTypes = {\n    query: PropTypes.string.isRequired,\n    currentPage: PropTypes.number.isRequired,\n};\n\n\nexport default pixabayFetchPhoto;","import { useState } from 'react';\nimport PropTypes from 'prop-types';\n\n\nexport default function Searchbar({onSubmit}){\n\n    const [query, setQuery] = useState('');\n\n    const handleChange = e => {\n        setQuery(\n            e.currentTarget.value.toLowerCase()\n        );\n    };\n\n    const handleSubmit = e => {\n        e.preventDefault();\n\n        onSubmit(query);\n        setQuery('');\n    };\n\n        return (\n            <header className=\"Searchbar\">\n                <form className=\"SearchForm\" onSubmit={handleSubmit}>\n                    <button type=\"submit\" className=\"SearchForm-button\">\n                        <span className=\"SearchForm-button-label\">Search</span>\n                    </button>\n\n                    <input\n                        value={query}\n                        className=\"SearchForm-input\"\n                        type=\"text\"\n                        autoComplete=\"off\"\n                        autoFocus\n                        placeholder=\"Search images and photos\"\n                        onChange={handleChange}\n                    />\n                </form>\n            </header>\n        );\n   \n}\n\nSearchbar.propTypes = {\n    onSubmit: PropTypes.func.isRequired,\n};\n\n","import { useEffect } from 'react';\nimport { createPortal } from 'react-dom';\nimport PropTypes from 'prop-types';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nexport default function Modal({src, alt, onClose}){\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  })\n\n  const handleKeyDown = e => {\n    if (e.code === 'Escape') {\n      onClose();\n    }\n  };\n\n  const handleBackdropClick = event => {\n    if (event.currentTarget === event.target) {\n      onClose();\n    }\n  };\n\n    return createPortal(\n      <div className=\"Overlay\" onClick={handleBackdropClick}>\n        <div className=\"Modal\">\n          <img src={src} alt={alt} />\n        </div>\n      </div>,\n      modalRoot,\n    )\n}\n\n\nModal.propTypes = {\n    onClose: PropTypes.func.isRequired,\n    src: PropTypes.string.isRequired,\n    alt: PropTypes.string.isRequired,\n  };","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Modal from '../Modal/Modal';\n\nexport default function ImageGalleryItem ({src, alt, largeImageUrl}){\n    \n    const [modalOpen, setModalOpen] = useState(false);\n\n    const toggleModal = () => {\n       \n        setModalOpen(!modalOpen);\n        };\n\n        return (\n            <li className=\"ImageGalleryItem\">\n                <img\n                    onClick={toggleModal}\n                    src={src}\n                    alt={alt}\n                    className=\"ImageGalleryItem-image\"\n                />\n                {modalOpen && (<Modal onClose={toggleModal} src={largeImageUrl} alt={alt} />)}\n            </li>\n        );\n    \n}\n\nImageGalleryItem.propTypes = {\n    src: PropTypes.string.isRequired,\n    alt: PropTypes.string.isRequired,\n    largeImageUrl: PropTypes.string.isRequired,\n};\n","import ImageGalleryItem from \"../ImageGalleryItem/ImageGalleryItem\";\nimport PropTypes from 'prop-types';\n\nexport default function ImageGallery({ images }) {\n    return (\n        <ul className=\"ImageGallery\">\n            {images.map((image) => (\n                <ImageGalleryItem\n                    src={image.webformatURL}\n                    alt={image.tags}\n                    largeImageUrl={image.largeImageURL}\n                    key={image.id}\n                />\n            ))}\n  \n        </ul>\n    );\n}\n\nImageGallery.propTypes = {\n  gallery: PropTypes.arrayOf(PropTypes.object),\n};","import React from \"react\";\nimport PropTypes from 'prop-types';\n\nexport default function Button({ onClick }) {\n    return(\n        <button type='button' className='Button' onClick={onClick}>\n            Load more\n        </button>\n    );\n}\n\nButton.propTypes = {\n  onClick: PropTypes.func.isRequired,\n};","import React, { Component } from \"react\";\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\nimport Loader from \"react-loader-spinner\";\nexport default class LoaderSpinner extends Component {\n  render() {\n    return (\n      <Loader\n        type=\"TailSpin\"\n        color=\"#00BFFF\"\n        height={80}\n        width={80}\n        timeout={300}\n        className='Loader'\n      />\n    );\n  }\n}","import './App.css';\nimport { useState, useEffect } from 'react';\n\nimport pixabayFetchPhoto from './services/pixabay';\nimport Searchbar from './components/Searchbar/Searchbar';\nimport ImageGallery from './components/ImageGallery/ImageGallery';\nimport Button from './components/Button/Button';\nimport LoaderSpinner from './components/Loader/Loader';\n\nexport default function App() {\n\n  const [images, setImages] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [search, setSearch] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n  if (!search) {\n    return;\n  }\n    \n   setIsLoading(true);\npixabayFetchPhoto(search, currentPage)\n  .then(gallery => {\n    setImages(prevState => [...prevState, ...gallery]);\n  })\n  .catch(error => {\n    setError(error);\n  })\n  .finally(() => {\n    setIsLoading(false);\n  });\n  }, [currentPage, search]);\n  \n  const onLoadMoreButtonClick = () => {\n    setCurrentPage(prevState => prevState + 1);\n    const options = {\n          top: null,\n          behavior: 'smooth',\n        };\n\n        options.top = window.pageYOffset + document.documentElement.clientHeight;\n        setTimeout(() => {\n          window.scrollTo(options);\n        }, 500);\n    };\n\n  const handleSubmit = newSearch => {\n    if (newSearch === search) {\n      return;\n    }\n    setSearch(newSearch);\n    setCurrentPage(1);\n    setImages([]);\n  };\n    \n  \n   return (\n      <div className=\"App\">\n       \n        <Searchbar onSubmit={handleSubmit} />\n        {error && (<p>No matches found! Try again!</p>)}\n        {isLoading && (\n          <LoaderSpinner />\n        )}\n        <ImageGallery images={images} />\n        {search && images.length > 11 && (\n          <Button onClick={onLoadMoreButtonClick} />\n        )}\n      </div>\n    ); \n}\n\n  \n\n\n  \n  ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}